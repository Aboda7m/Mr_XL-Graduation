@page "/login"
@using Microsoft.AspNetCore.Identity
@using Mr_XL_Graduation.Data // Adjust this based on your project's namespace for Identity
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager
@inject NavigationManager NavigationManager

<link href="css/Login.css" rel="stylesheet" />

<h2 style="text-align:center">Login Form</h2>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div style="color: red; text-align: center;">@ErrorMessage</div>
}

<form @onsubmit="HandleLogin">
    <div class="imgcontainer">
        <img src="img_avatar2.png" alt="Avatar" class="avatar">
    </div>

    <div class="container">
        <label for="username"><b>Username</b></label>
        <input type="text" @bind="Username" placeholder="Enter Username" required>

        <label for="password"><b>Password</b></label>
        <input type="password" @bind="Password" placeholder="Enter Password" required>

        <button type="submit">Login</button>
        <label>
            <input type="checkbox" checked="checked" name="remember"> Remember me
        </label>
    </div>

    <div class="container" style="background-color:#f1f1f1">
        <button type="button" @onclick="CancelLogin">Cancel</button>
        <span class="psw">Forgot <a href="#">password?</a></span>
        <button type="button" @onclick="GoToRegister">Register as New Student</button>
    </div>
</form>

@code {
    private string Username { get; set; }
    private string Password { get; set; }
    private string ErrorMessage { get; set; }

    private async Task HandleLogin()
    {
        Console.WriteLine("Starting login process...");  // Debug print
        ErrorMessage = null; // Clear previous error messages

        var result = await SignInManager.PasswordSignInAsync(Username, Password, true, lockoutOnFailure: false);

        Console.WriteLine($"Login attempt: Username={Username}, Result={result.Succeeded}"); // Debug print

        if (result.Succeeded)
        {
            bool isAdmin = await IsUserAdmin(Username);
            Console.WriteLine($"Is user admin: {isAdmin}"); // Debug print
            string redirectUrl = isAdmin ? "/admin/dashboard" : $"/welcome/{Username}";
            NavigationManager.NavigateTo(redirectUrl);
        }
        else
        {
            ErrorMessage = "Invalid username or password.";
            Console.WriteLine($"Login failed: {ErrorMessage}"); // Debug print
        }
    }

    private void CancelLogin()
    {
        NavigationManager.NavigateTo("/home");
    }

    private void GoToRegister()
    {
        NavigationManager.NavigateTo("/register");
    }

    private async Task<bool> IsUserAdmin(string username)
    {
        Console.WriteLine($"Checking if user is admin: {username}"); // Debug print
        var user = await UserManager.FindByNameAsync(username);

        if (user != null)
        {
            var roles = await UserManager.GetRolesAsync(user);
            bool isAdmin = roles.Contains("Admin"); // Adjust based on your role naming convention
            Console.WriteLine($"User found. Roles: {string.Join(", ", roles)}. Is Admin: {isAdmin}"); // Debug print
            return isAdmin;
        }

        Console.WriteLine("User not found."); // Debug print
        return false;
    }
}
